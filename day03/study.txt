23.08.23

Q. This is how we declare a function correctly in Dart:
calculateTotal(items: List<int>) void{}
1. True
2. False
A. 2
Dart에서 함수를 선언할 때, 반환 타입을 지정하려면 함수 이름 뒤에 반환 타입을 써야 한다. 
올바른 함수 선언 작성:
void calculateTotal(List<int> items) {
  // 함수 구현
}
함수 이름 calculateTotal은 List<int> 타입의 매개변수 items를 받으며, 반환 타입으로 void를 가지는 것을 나타낸다. 
함수 본문에는 구체적인 구현을 작성하시면 됨.

-----

Q. This is how we declare a function correctly in Dart:
void calculateTotal(List<int> items){}
1. True
2. False
A. 1
Dart에서 함수를 선언할 때, 반환값이 없는 함수에 대해서는 void 키워드를 함수 이름 뒤에 작성한다. 
따라서 주어진 코드는 올바르게 함수를 선언한 예시이다. 
calculateTotal 함수는 List<int> 타입의 매개변수 items를 받으며, 반환 타입으로 void를 가지는 것을 의미한다. 
함수 본문에는 구체적인 구현을 작성하면 됨.

-----

Q. These two functions are the same:
int calculate(int a, int b) => a + b;
int calculate(int a, int b) {
    return a + b;
}
1. True
2. False
A. 1
두 함수는 동일한 동작을 수행한다. 
둘 다 int 타입의 매개변수 a와 b를 받고, 이 두 값을 더한 결과를 int로 반환한다. 
다만 두 가지 다른 문법 스타일을 사용하여 함수를 정의한 것 뿐이다.
첫 번째 함수는 화살표 (=>) 문법을 사용하여 함수를 간결하게 정의한 것이며, 
두 번째 함수는 일반적인 중괄호와 return 키워드를 사용하여 함수를 정의한 것이다. 
이 둘은 기능적으로 동등하며, 어떤 것을 사용할지는 취향에 따라 결정하면 된다.

-----

Q. This function is using positional parameters:
calculateTotal(
    items:5,
    discount:10,
    username:'nico',
);
1. True
2. False
A. 2
주어진 코드에서 사용된 함수 호출은 named parameters (이름 있는 매개변수)를 사용하고 있다. 
Dart에서 positional parameters (위치에 따른 매개변수)와 named parameters는 다른 종류의 매개변수 전달 방식이다.
위의 함수 호출에서 items, discount, 그리고 username은 모두 이름 있는 매개변수(named parameters)로 간주된다. 
위치에 따른 매개변수를 사용하려면 함수 호출 시 매개변수의 순서대로 값을 전달해야 한다.
위의 코드에서 이름 있는 매개변수(named parameters)를 사용하려면 다음과 같이 수정해야 한다:
calculateTotal(5, 10, 'nico');
이렇게 수정하면 items, discount, 그리고 username에 순서대로 값이 전달된다.

-----

Q. How should we call this function?
int plus({required int a, required int b, required int c}) => a + b + c;
1. plus(a:1, b:2, c:3)
2. plus(1, 2, 3)
A. 1
이 함수를 호출할 때에는 명명된 매개변수(named parameters)를 사용하여 호출해야 한다.
a, b, c와 같은 매개변수 이름을 명시해서 각각의 값들을 전달한다.
plus(1, 2, 3)은 위치에 따른 인자(positional arguments)를 사용하려는 것인데, 
이 함수는 명명된 매개변수(named parameters)를 사용하고 있기 때문에 위치에 따른 인자를 사용할 수 없다. 
만약 함수가 명명된 매개변수를 가지고 있다면, 매개변수의 이름을 사용하여 호출하는 것이 바람직하다.

-----

Q. With this code:
int plus(int a, int b, [int? c = 1]) => a + b + (c ?? 0);
What will the return value of plus(1,2) be?
1. 1
2. 2
3. 3
4. 4
A. 3
int plus(int a, int b, [int? c = 1]) => a + b + (c ?? 0);
이 함수 plus는 세 개의 매개변수 a, b, 그리고 옵셔널한 위치에 따른 매개변수 c를 가지며, 
기본값으로 1을 가진다. 
함수를 plus(1, 2)와 같이 호출할 때, a와 b에 각각 1과 2의 값이 전달된다. 
c는 제공되지 않았으므로 기본값 1을 가지게 된다.

함수 내부의 계산 :
a + b + (c ?? 0) = 1 + 2 + (1) = 4
따라서, plus(1, 2)의 반환값은 4다.

-----

Q. With this code:
var a = null;
var b = a ?? 0;
What is the value of b?
1. 0
2. 1
3. 2
4. 3
A. 1
var a = null;
var b = a ?? 0;
변수 a에는 null이 할당되었다. 
?? 연산자는 널 안전 연산자(null-aware coalescing operator)다.
이 연산자는 왼쪽 피연산자가 null이 아니면 왼쪽 피연산자의 값을 반환하고, 
그렇지 않으면 오른쪽 피연산자의 값을 반환한다.

a가 null이므로 표현식 a ?? 0은 0으로 평가된다. 
변수 b의 값은 0이 된다.

-----

Q. With this code:
var a = 1;
a ??=  0;
What is the value of a?
1. 0
2. 1
3. 2
4. 3
A. 2
var a = 1;
a ??= 0;
변수 a에는 초기에 1이 할당되었다. 
그런 다음 ??= 연산자를 사용하여 a가 null이 아니면 그대로 두고, 
null이면 오른쪽 피연산자의 값을 a에 할당하는 역할을 한다.
하지만 a가 이미 1로 할당되어 있기 때문에 ??= 연산자는 아무 작업을 수행하지 않는다.
변수 a의 값은 1이다.