2023-08-21 / day01 Quiz
----------------------

1.Dart is a functional programming language.
-> False

1. Dart는 함수형 프로그래밍 언어입니다.
-> Dart는 다중 패러다임 프로그래밍 언어이다. 함수형 프로그래밍 개념을 지원하지만 함수형 프로그래밍 언어만 있는 것은 아니다.



2. Dart can be compiled into ARM64 and JavaScript.
-> True

2. Dart는 ARM64 및 JavaScript로 컴파일될 수 있다.
-> Dart는 네이티브 코드 실행을 위한 ARM64 및 웹 기반 애플리케이션을 위한 JavaScript를 포함하여 다양한 대상 플랫폼으로 컴파일할 수 있다.



3. Javascript is an AOT-compiled language.
-> False

3. Javascript는 AOT로 컴파일된 언어입니다.
-> JavaScript는 일반적으로 해석되거나 JIT(Just-In-Time) 컴파일된 언어로 코드가 런타임에 실행됨을 의미한다. AOT(Ahead-of-Time) 컴파일은 JavaScript의 표준 기능이 아니다.


4. C++ is a JIT-compiled language.
->False

4. C++는 JIT로 컴파일된 언어입니다.
-> 특정 사용 사례에 대해 JIT(Just-in-Time) 컴파일을 지원하는 일부 구현 및 도구가 있지만 C++는 기본적으로 정적으로 컴파일된 언어이다.



5. Flutter uses Dart's JIT on development and AOT on production.
->True

5. Flutter는 개발 시 Dart의 JIT를 사용하고 프로덕션 시 AOT를 사용합니다.
-> "Flutter는 개발 시에는 Dart의 JIT(Just-in-Time) 컴파일을 사용하고, 
프로덕션 환경에서는 AOT(Ahead-of-Time) 컴파일을 사용한다"는 주장은 맞다.
Flutter는 크로스 플랫폼 모바일 애플리케이션 개발을 위한 프레임워크로, 플랫폼 및 배포 시나리오에 따라 다양한 컴파일 모드를 사용한다.
개발 중에는 일반적으로 Flutter는 Dart의 JIT 컴파일을 사용한다. 
JIT 컴파일은 빠른 개발 주기를 지원하기 위해 핫 리로드(hot-reload)를 가능하게 합니다. 
핫 리로드는 코드 변경을 빠르게 적용하여 실행 중인 애플리케이션에 반영할 수 있으며, 전체 재빌드와 재시작 없이 변경 내용을 확인할 수 있다. 
JIT 컴파일러는 Dart 코드를 실행 시간에 분석하고 변환하여 실행 가능한 기계 코드로 만든다. 
이 동적 컴파일 접근 방식은 빠른 개발과 반복적인 테스트를 지원한다.
하지만 프로덕션 환경에서는 AOT 컴파일을 사용할 수 있다.
Flutter는 Dart 코드를 미리 컴파일하여 (AOT) 네이티브 ARM 기계 코드로 변환한다. 
이 AOT 컴파일은 애플리케이션이 스토어를 통해 배포되기 전에 수행되어 최적화된 실행 파일을 생성한다.
요약- Flutter는 개발 중에는 빠른 반복과 핫 리로드 기능을 위해 JIT 컴파일을 사용하며, 
배포 및 프로덕션 과정에서는 최적화된 네이티브 코드를 생성하기 위해 AOT 컴파일을 사용한다.



6. All Dart programs need to have a main function.
-> True

6. 모든 Dart 프로그램에는 main 함수가 있어야 합니다.
-> Dart에서 모든 실행 가능 프로그램에는 프로그램의 진입점으로 main() 함수가 있어야 한다. 실행은 main() 함수에서 시작된다.



7. Semicolons are required in Dart.
-> True

7. Dart에는 세미콜론이 필요하다.
-> Dart에서 세미콜론은 필수 사항이다. 
Dart는 줄 바꿈을 사용하여 명령문을 구분할 수 있지 않는다.



8. When using var, we always have to specify a type: var String name = '니꼬';
-> False 

8. var를 사용할 때는 항상 타입을 지정해야 합니다. var String name = '니꼬';
-> var를 사용할 때 type을 명시적으로 지정할 필요가 없다. 
Dart는 할당된 값을 기반으로 유형을 유추할 수 있다.올바른 사용법은 var name = '니꼬'이다. 유형을 지정하지 않는다.



9. This code will not compile:

void main() {
    var age = 18;
    age = 19;
}
 

-> False

9. 이 코드는 컴파일되지 않습니다.
-> 코드가 문제 없이 컴파일된다. 
Dart에서 var로 선언된 변수는 값을 재할당할 수 있다. 
나이 값을 18에서 19로 변경하는 것이 유효하다.



10. var name = '니꼬'; and String name = '니꼬'; are practically the same.
-> True

10. var name = '니꼬'; and String name = '니꼬'; 실질적으로 동일합니다.
-> 대부분의 경우 var name = '니꼬'; and String name = '니꼬'; 기능적으로 동일하다. 
두 경우 모두 변수 이름은 할당된 값을 기반으로 문자열 유형으로 유추된다.



11. This code will not compile:

void main(){
    String age = "18";
    age = 19;
}
 

-> True

11. 이 코드는 컴파일되지 않습니다.
-> 코드가 컴파일되지 않는다.
 이 예에서 변수 age는 문자열 유형으로 명시적으로 선언된다. 
문자열 변수에 정수 값 19를 지정하면 유형 불일치 오류가 발생한다.



12. A variable of type dynamic can contain any type of value.
-> True

12. dynamic 유형의 변수는 모든 유형의 값을 포함할 수 있습니다.
-> dynamic 유형의 변수는 모든 유형의 값을 보유할 수 있다. 
정적 유형 검사를 우회하고 런타임 동안 동적 유형 동작을 허용한다.



13. Pick the nullable variable.

String email = "";
String? email = "";
var email = "";
var email? = ""
 

-> Option 2 is the nullable variable.

13. nullable 변수를 선택합니다.
-> Dart에서 ? 접미사는 nullable 유형을 나타낸다. 
그래서 문자열? 이메일 = ""; 변수 email이 문자열 값을 보유하거나 null일 수 있음을 나타낸다. 
다른 옵션은 nullable 형식을 명시적으로 나타내지 않는다.



14. By default, all variables in Dart are non-nullable.
-> True

14. 기본적으로 Dart의 모든 변수는 null을 허용하지 않습니다.
-> 기본적으로 Dart의 변수는 null을 허용하지 않는다. 
null 허용 여부를 적용하려면 "?"를 사용해야 한다.
 


15. Variables created with var can be overridden.
-> True

15. var로 만든 변수는 재정의할 수 있습니다.
-> var로 생성된 변수는 타입을 재정의할 수 없지만 같은 타입이라면 수정될 수 있다.
다른 타입으로 재정의할 수 없는 이유는 Dart가 초기화 시 변수의 유형을 유추하고 해당 유형으로 잠그기 때문이다.



16. Variables created with final can be overridden.
-> False
 
16. final로 생성된 변수는 재정의할 수 있습니다.
-> final로 생성된 변수는 덮어쓸 수 없다. 
최종 변수에 값이 할당되면 변경할 수 없다.



17. late allows us to create variables that will be assigned later.
-> True

17. late를 사용하면 나중에 할당할 변수를 만들 수 있습니다.
-> Dart의 late 키워드를 사용하면 처음에는 초기화되지 않았지만 액세스하기 전에 값이 할당되는 변수를 만들 수 있다. 
초기화를 지연해야 하지만 변수가 사용될 때 값이 있는지 확인해야 하는 경우에 유용하다.



18. const in Dart is the same as const in TypeScript.
-> False

18. Dart의 const는 TypeScript의 const와 동일합니다.
-> Dart와 TypeScript는 모두 const 키워드를 가지고 있지만 서로 다른 의미를 가지고 있다. 
Dart에서 const는 컴파일 타임 상수를 나타내고 TypeScript에서는 불변 값을 나타낸다.




19. const is the same as final.
-> False

19. const는 final과 동일합니다.
-> Dart에서 const와 final은 다른 의미를 가진다. 
const는 컴파일 타임에 알려지고 고정되는 컴파일 타임 상수에 사용되는 반면, 
final은 한 번 설정될 수 있고 프로그램 실행 내내 일정하게 유지되는 값에 사용된다.
 



20. When do we use const over final?

1. When the value is not known ahead of compilation
2. When the value is known ahead of compilation
-> Option 2. When the value is known ahead of compilation.

20. final보다 언제 const를 사용합니까?

1. 컴파일 전에 값을 알 수 없는 경우
2. 컴파일 전에 값을 알고 있는 경우
-> const는 컴파일 타임에 값을 결정할 수 있는 경우에 사용되는 반면, 
final은 런타임에 값이 결정되지만 프로그램 실행 내내 일정하게 유지되는 경우에 사용된다.